Lstm model

it is special kind of recurrent neural network that is capable of learning long term dependencies in data. This is acheived because the recurring module of the model has a combination of four layers interacting with each other.

Long short term memory network is an advanced RNN, a sequential network , that allows information to persist. It is capable of handling the vanising gradient problem faced by RNN. A recurrent neural network is also known as RNN is used for persistent memory.

let say while watching a video you remember the previous scene or while reading a book you know what happened in the ealier chapter. similarly RNNs work, they remember the previous information and use it for processing the current input. The shortcoming of RNN is, they cannot remember Lond term dependencies due to vanishing gradient. LSTMs are explicitly designed to avoid long term dependency problems.

The LSTM consists of three parts
1. forget gate
2. Input gate
3. Output gate

Q2. Explain movie recommendation project

Recommendation systems are computer programs that suggest recommendations to users depending on a variety of criteria.
These systems estimate the most likely prodcut that consumers will buy and that they will be interested in . Netflix, Amazon, and other companies use recommender systems to help their users find the right product or movie for them.

There are three types of rcommendation system:
1. Demographic Filtering
2. Content-Based filtering
3. Collaboration-based filtering

In this project, we build a collaboration-based recomendation engine for movies.

Steps:
1. Perform Exploratory Data Analysis(EDA) on the data.
2. Build the recommendation system.
3. Get recommendation.

The dataset contains all the metadata information about the moviename, movie id, genes, year etc.

one movie recommendation engine works by suggesting movies to the user based on the metadata information.
The similarity between and converted into a vectorizer using the countvectorizer. As the name suggests, countvectorizer counts the frequency of each word and output a 2d vector containing frequencies.

we don't take into account the words like a, an ,the (these are called stopwords) because these words are usually present in higher amounts in the text and don't make any sense.

There exist several similarity score functions such as coine similarity. person correlation coefficient, etc.
here we use the cosine similarity score as this is just the dot product of the vector output by the countVectorizer.

Get the index of the movie using the title.
get the list of similarity scores of the movies concerning all the movies.
Enumerate them (create tuples) with the first element being the index and the second element is the cosine 
similarity score.
sort the list of tuples in desending order based on the similarity score.
get the list of the indices of the top 10 movies from the above sorted list. Exclude the first element because it is the title itself.

map those indices to their respective titles and return the movie list.

tell me about littel bit about your previous experience.

1. Resolve assigned service requests related to support portals using troubleshooting and prblem-solving skills, while following and ccomplying with establised procedures and policies.

2. Ensure accuracy and consistent within the procedure documentations, report any errors, propose process improvement.

3. Tracking the tickets in the queue and driving it to closure on critical incidents.

4. Mentored others in providing validated technical validated technical information and supported process instruction and special support requirements.

5. Acheived extremely high level of user satisfaction through timely mitigation and resolution of issue.
***********************************************
x = 2.9
print(abs(-2.9))
***********
x = 2.9
print(round(x))
************************
import math

print(math.floor(2.9))
*****************************
Math functions
_____________
import math
math.sqrt(4)
---------------
ceil(x) - Returns the smallest integer greater than equal or equal to x.
copysign(x,y) - Returns x with the sign of y
fabs(x) - Retuens the absolute of x.
factorial(x) - Returns the factorial of x.
floor(x) - Returns the largest integer less than or equal to x.
fmod(x,y) - Returns the remainder when x is divided by y.
frexp(x) - Returns the mantissa and exponent of x as the pair(m,e).
fsum(iterable) - Returns an accurate floating point sum of values in the iterable.
isfinite(x) - Returns True if x is neither an infinity nor a Nan.
isinf(x)- Returns True if x is a positive or negative infinity.
isnan(x) - Returns True if x is Nan.
idexp(x,i) -Returns x*(2**i)
modf(x) -Returns the fractional and integer parts of x.
trunc(x) - Returns the truncated integer value of x.
exp(x) - Returns e**x
expml(x) - Returns e**x-1
log(x[,b])- Returns the logarithm of x to the base b
loglp(x) - Returns the natural logarithm of 1+x.
log2(x) - Returns the base-2 logarithm of x.
log10(x) - Returns the base-10 logarithm of x.
pow(x,y) - Return x raised to the power y.
sqrt(x) - Returns the square root of x.
acos(x) - Returns the arc cosine of x.
asin(x) - Returns the arc sine of x.
atan(x) - Returns the arc tangent of x.
atan2(y,x) - Returns atan(y/x)
cos(x) - Returns the cosine of x.
hypot(x,y) - Returns the euclidean norm, sqrt(x*x+y*y).
sin(x) - Returns the sine of x.
tan(x) - Returns the tangent of x.
degrees(x)- converts angle x from radians to degree.
radians(x) - Converts angle x from degrees to radians.
acosh(x) - Returns the inverse hyperbolic cosine of x.
asinh(x) - Returns the inverse hyperbolic sine of x.
atanh(x) - Returns the inverse hyperbolic tan of x.
cosh(x) - Returns the hyperbolic cosine of x.
sinh(x) - Returns the hyperbolic sin of x.
tanh(x) - Returns the hyperbolic tangent of x.
erf(x) - Returns the error function at x.
erfc(x) - Returns the complementary error function at x.
gamma(x) - Returns the gamma function at x.
Igamma(x) - Returns the natural logarithm of the absolute value of the Gamma function at x.
pi - Mathematical constant, the ratio of circumference of a circle to it's diameter
e - mathematical constant e.
***************************************************************************

is_hot = True
is_cold = False

if is_hot:
    print("it's a hot day")
    print("Drink plenty of water")
elif is_cold:
    print("it's a cold day")
    print("wear warm clothes")
else:
    print("it's a lovely day")
print("enjoy your day")
**************************************
price = 1000000
has_good_credit = True

if has_good_credit :
    down_payment = 0.1 * price
else:
    down_payment = 0.2 * price
print(f"Down Payment: ${down_payment}")
********************************************
has_high_income = True
has_good_credit = True

if has_high_income and has_good_credit:
    print("Eligible for loan")
*************************************
has_good_credit = True
has_criminal_record = False

if has_good_credit and not has_criminal_record:
    print("Eligible for loan")
************************************************
temperature = 37

if temperature > 30:
    print("It's a hot day")
else:
    print("It's not a hot day")
********************************
name ="James"

if len(name) < 3:
    print("Name must be at least 3 characters")
elif len(name) > 50:
    print("Name must be a maximum of 50 characters")
else:
    print("Name looks good!")
**********************************************
weight = int(input("weight: "))
unit = input('(L)bs or (K)g: ')
if unit.upper() == "L":
    converted = weight * 0.45
    print(f"You are {converted} kilos")
else:
    converted = weight / 0.45
    print(f"You are {converted} pounds")
***********************************************
i = 1
while i <= 5:
    print(i)
    i = i + 1
print("Done")
**********************************
i = 1
while i <= 5:
    print('*' * i)
    i = i + 1
print("Done")
*************************
secret_number = 9
guess_count = 0
guess_limit = 3
while guess_count < guess_limit:
    guess = (input("Guess: "))
    guess_count += 1
    if guess == secret_number:
        print("you won!")
        break
else:
    print("Sorry, You failed")
************************************
command= ""
started = False
while True:
    command = input("> ").lower()
    if command == "start":
        if started:
            print("Car is already started!")
        else:
            started = True
            print("Car started ...")
    elif command == "stop":
        if not started:
            print("Car is already stopped!")
        else:
            started = False
            print("Car stopped.")
    elif command == "help":
        print("""
Start - to start the car
Stop - to stop the car
quit - to quit
        """)
    elif command == "quit":
        break
    else:
        print("Sorry, I don't understand that!")
**********************************************************
for item in "python":
    print(item)
*********************************
for item in ["Mars", "John","Kera","asha"]:
    print(item)
**************************************8
for item in [1,2,3,4,5,6,7,8,9,10,11,12,13]:
    print(item)
************************************************
for item in range(10):
    print(item)
***********************************
for item in range(5,10):
    print(item)
*****************************
for item in range(5,10,2):
    print(item)
******************************
prices = [10,20,30]

total = 0
for price in prices:
    total +=  price
print(f"Total: {total}")
*************************************************
for x in range(4):
    for y in range(3):
        print(f"({x}, {y})")
*************************************************
numbers = [5,2,5,2,2]
for x_count in numbers:
    output = ''
    for count in range(x_count):
        output += "#"
    print(output)
***********************************
numbers = [9,1,4,1,9]
for x_count in numbers:
    output = ''
    for count in range(x_count):
        output += "x"
    print(output)
*********************************
names = ['John','Bob','Mosh','Sarah','asif']
print(names)
print(names[0])
print(names[-1])
print(names[4:7])
print(names[2:])
print(names[1:5:2])
**************************************
numbers = [3,6,2,8,4,10,12,4,3,43,43]
max = numbers[0]

for number in numbers:
    if number > max:
        max = number
print(max)
*************************
 







